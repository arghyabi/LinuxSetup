############################################### BASH COLOR UPDATE SCRIPT ###############################################
# Define color variables (with proper Bash prompt escaping)
GREEN="\[\033[01;92m\]"  # Bright green
BLUE="\[\033[01;94m\]"  # Bright blue
RED="\[\033[01;91m\]"   # Bright red
RESET="\[\033[00m\]"    # Reset

# Unescaped ANSI codes for inside functions
PLAIN_GREEN="\033[01;92m"
PLAIN_BLUE="\033[01;94m"
PLAIN_RED="\033[01;91m"
PLAIN_RESET="\033[00m"

# Function to parse the current Git branch and changes with consistent red parentheses
parse_git_status() {
    if git rev-parse --is-inside-work-tree &>/dev/null; then
        local branch="${PLAIN_RED}($(git symbolic-ref --short HEAD 2>/dev/null || git rev-parse --short HEAD 2>/dev/null))${PLAIN_RESET}"
        local changes=""
        if [[ -n $(git diff --ignore-submodules) ]] || \
           [[ -n $(git diff --cached --ignore-submodules) ]] || \
           [[ -n $(git ls-files --others --exclude-standard) ]]; then
            changes="${PLAIN_GREEN}*${PLAIN_RESET}"
        fi
        echo -e " ${branch}${changes}"
    fi
}

# Set the PS1 prompt using proper syntax and escaping
if [ "$color_prompt" = yes ]; then
    PS1="${debian_chroot:+($debian_chroot)}${GREEN}\u${RED}@${GREEN}\h${RESET}:${BLUE}\w\[\$(parse_git_status)\]${RESET}\$ "
else
    PS1="${debian_chroot:+($debian_chroot)}${GREEN}\u${RED}@${GREEN}\h${RESET}:${BLUE}\w\[\$(parse_git_status)\]${RESET}\$ "
fi
############################################# END BASH COLOR UPDATE SCRIPT #############################################
